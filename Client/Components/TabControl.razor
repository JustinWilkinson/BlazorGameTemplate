@inject IJSRuntime JSRuntime

<CascadingValue Value="this">
    <div class="btn-group overflow-auto @AdditionalButtonGroupClasses" role="group">
        @foreach (TabPage tabPage in _pages)
        {
            <button id="@tabPage.ButtonId" type="button" class="btn @GetButtonClass(tabPage) @AdditionalButtonClasses" @onclick=@(() => ActivatePage(tabPage))>@tabPage.Title</button>
        }
    </div>
    <div class="w-100">
        @ChildContent
    </div>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string AdditionalButtonGroupClasses { get; set; }

    [Parameter]
    public string AdditionalButtonClasses { get; set; }

    [Parameter]
    public EventCallback<TabPage> OnTabSelected { get; set; }

    public TabPage ActivePage { get; set; }

    private List<TabPage> _pages = new List<TabPage>();

    public void AddPage(TabPage tabPage)
    {
        _pages.Add(tabPage);
        if (_pages.Count == 1)
        {
            ActivePage = tabPage;
        }
        StateHasChanged();
    }

    private string GetButtonClass(TabPage page) => page == ActivePage ? "btn-primary" : "btn-secondary";

    private async Task ActivatePage(TabPage page)
    {
        ActivePage = page;
        await OnTabSelected.InvokeAsync(ActivePage);
        ActivePage.OnTabSelected?.Invoke();
    }
}